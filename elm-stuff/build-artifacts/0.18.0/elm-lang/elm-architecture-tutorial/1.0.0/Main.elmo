var _elm_lang$elm_architecture_tutorial$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _elm_lang$elm_architecture_tutorial$Main$message = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Task$succeed(msg));
};
var _elm_lang$elm_architecture_tutorial$Main$chooseRandomQuote = function (quotes) {
	return _elm_community$random_extra$Random_Extra$sample(quotes);
};
var _elm_lang$elm_architecture_tutorial$Main$renderQuoteClass = function (bool) {
	var style = _elm_lang$core$Basics$toString(bool);
	return A2(_elm_lang$core$Basics_ops['++'], 'quote ', style);
};
var _elm_lang$elm_architecture_tutorial$Main$renderAuthorClass = function (bool) {
	var style = _elm_lang$core$Basics$toString(bool);
	return A2(_elm_lang$core$Basics_ops['++'], 'sub ', style);
};
var _elm_lang$elm_architecture_tutorial$Main$flip = function (bool) {
	return !bool;
};
var _elm_lang$elm_architecture_tutorial$Main$Quote = F2(
	function (a, b) {
		return {quote: a, author: b};
	});
var _elm_lang$elm_architecture_tutorial$Main$quoteDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$elm_architecture_tutorial$Main$Quote,
	A2(_elm_lang$core$Json_Decode$field, 'quote', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'author', _elm_lang$core$Json_Decode$string));
var _elm_lang$elm_architecture_tutorial$Main$decodeData = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'quotes',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$list(_elm_lang$elm_architecture_tutorial$Main$quoteDecoder));
var _elm_lang$elm_architecture_tutorial$Main$Model = F5(
	function (a, b, c, d, e) {
		return {quotes: a, selectedQuote: b, quotesLoaded: c, styleBool: d, error: e};
	});
var _elm_lang$elm_architecture_tutorial$Main$NoOp = {ctor: 'NoOp'};
var _elm_lang$elm_architecture_tutorial$Main$RandomQuote = function (a) {
	return {ctor: 'RandomQuote', _0: a};
};
var _elm_lang$elm_architecture_tutorial$Main$Generate = {ctor: 'Generate'};
var _elm_lang$elm_architecture_tutorial$Main$renderQuote = F2(
	function (quote, bool) {
		var _p0 = quote;
		if (_p0.ctor === 'Nothing') {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('loading'),
					_1: {ctor: '[]'}
				});
		} else {
			var _p1 = _p0._0;
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(
								_elm_lang$elm_architecture_tutorial$Main$renderQuoteClass(bool)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p1.quote),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class(
									_elm_lang$elm_architecture_tutorial$Main$renderAuthorClass(bool)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(_p1.author),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('generate'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_elm_lang$elm_architecture_tutorial$Main$Generate),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('New quote'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _elm_lang$elm_architecture_tutorial$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(_elm_lang$elm_architecture_tutorial$Main$renderQuote, model.selectedQuote, model.styleBool),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$elm_architecture_tutorial$Main$NewData = function (a) {
	return {ctor: 'NewData', _0: a};
};
var _elm_lang$elm_architecture_tutorial$Main$getData = function () {
	var url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';
	var request = A2(_elm_lang$http$Http$get, url, _elm_lang$elm_architecture_tutorial$Main$decodeData);
	return A2(_elm_lang$http$Http$send, _elm_lang$elm_architecture_tutorial$Main$NewData, request);
}();
var _elm_lang$elm_architecture_tutorial$Main$init = {
	ctor: '_Tuple2',
	_0: A5(
		_elm_lang$elm_architecture_tutorial$Main$Model,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing,
		false,
		false,
		''),
	_1: _elm_lang$elm_architecture_tutorial$Main$getData
};
var _elm_lang$elm_architecture_tutorial$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'FetchData':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$elm_architecture_tutorial$Main$getData};
			case 'NewData':
				if (_p2._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{quotes: _p2._0._0, quotesLoaded: true}),
						_1: _elm_lang$elm_architecture_tutorial$Main$message(_elm_lang$elm_architecture_tutorial$Main$Generate)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Basics$toString(_p2._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'Generate':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_elm_lang$elm_architecture_tutorial$Main$RandomQuote,
						_elm_lang$elm_architecture_tutorial$Main$chooseRandomQuote(model.quotes))
				};
			case 'RandomQuote':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedQuote: _p2._0,
							styleBool: _elm_lang$elm_architecture_tutorial$Main$flip(model.styleBool)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _elm_lang$elm_architecture_tutorial$Main$main = _elm_lang$html$Html$program(
	{init: _elm_lang$elm_architecture_tutorial$Main$init, view: _elm_lang$elm_architecture_tutorial$Main$view, update: _elm_lang$elm_architecture_tutorial$Main$update, subscriptions: _elm_lang$elm_architecture_tutorial$Main$subscriptions})();
var _elm_lang$elm_architecture_tutorial$Main$FetchData = {ctor: 'FetchData'};
